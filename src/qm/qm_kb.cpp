//$file${../::src::qm::qm_kb.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: kb.qm
// File:  ${../::src::qm::qm_kb.cpp}
//
// This code has been generated by QM 6.1.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${../::src::qm::qm_kb.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qm/qm_kb.h"
#include "qm/qm_common.h"

//$declare${base::qm_kb} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${base::qm_kb} .............................................................
typedef struct {
// protected:
    QActive super;

// public:
    QTimeEvt timer;
    QTimeEvt hold_timer;
} qm_kb;

// protected:
static QState qm_kb_initial(qm_kb * const me, void const * const par);
static QState qm_kb_init(qm_kb * const me, QEvt const * const e);
static QState qm_kb_k0_hold(qm_kb * const me, QEvt const * const e);
static QState qm_kb_k1_hold(qm_kb * const me, QEvt const * const e);
static QState qm_kb_idle(qm_kb * const me, QEvt const * const e);
static QState qm_kb_reset(qm_kb * const me, QEvt const * const e);
//$enddecl${base::qm_kb} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


static qm_kb l_qm_kb;

QActive* const ao_qm_kb = (QActive*)&l_qm_kb;

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpc version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${base::qm_kb_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${base::qm_kb_ctor} ........................................................
void qm_kb_ctor(void) {
    qm_kb *me = &l_qm_kb;

    QActive_ctor(&me->super, Q_STATE_CAST(&qm_kb_initial));

    QTimeEvt_ctorX (&me->timer, &me->super, KB_TIMEOUT_SIG, 0U);

    QTimeEvt_ctorX (&me->hold_timer, &me->super, KB_HOLD_TIMEOUT_SIG, 0U);
}
//$enddef${base::qm_kb_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${base::qm_kb} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${base::qm_kb} .............................................................

//${base::qm_kb::SM} .........................................................
static QState qm_kb_initial(qm_kb * const me, void const * const par) {
    //${base::qm_kb::SM::initial}
    QActive_subscribe((QActive *)me, ACTIVATE_ACTOR_SIG);
    QActive_subscribe((QActive *)me, DEACTIVATE_ACTOR_SIG);


    QActive_subscribe((QActive *)me, KB_INIT_SIG);

    QActive_subscribe((QActive *)me, KB_KEY_EVENT_SIG);

    QActive_subscribe((QActive *)me, KB_K0_PRESS_SIG);
    QActive_subscribe((QActive *)me, KB_K0_RELEASE_SIG);

    QActive_subscribe((QActive *)me, KB_K1_PRESS_SIG);
    QActive_subscribe((QActive *)me, KB_K1_RELEASE_SIG);


    return Q_TRAN(&qm_kb_reset);
}

//${base::qm_kb::SM::init} ...................................................
static QState qm_kb_init(qm_kb * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_kb::SM::init}
        case Q_ENTRY_SIG: {
            LOG("qm_kb init");

            kb_init();

            QTimeEvt_armX(&me->timer,  BSP_TICKS_PER_SEC/50, BSP_TICKS_PER_SEC/50);
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_kb::SM::init}
        case Q_EXIT_SIG: {
            QTimeEvt_disarm(&me->timer);
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_kb::SM::init::KB_TIMEOUT}
        case KB_TIMEOUT_SIG: {

            kb_scan();

            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_kb::SM::init::KB_KEY_EVENT}
        case KB_KEY_EVENT_SIG: {
            //LOG("key evt");

            key_evt_t *ge = (key_evt_t *)e;

            kb_dispatch_event(ge->id, ge->state);
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_kb::SM::init::KB_K0_PRESS}
        case KB_K0_PRESS_SIG: {
            status_ = Q_TRAN(&qm_kb_k0_hold);
            break;
        }
        //${base::qm_kb::SM::init::KB_K1_PRESS}
        case KB_K1_PRESS_SIG: {
            status_ = Q_TRAN(&qm_kb_k1_hold);
            break;
        }
        //${base::qm_kb::SM::init::KB_K0_RELEASE}
        case KB_K0_RELEASE_SIG: {
            status_ = Q_TRAN(&qm_kb_idle);
            break;
        }
        //${base::qm_kb::SM::init::KB_K1_RELEASE}
        case KB_K1_RELEASE_SIG: {
            status_ = Q_TRAN(&qm_kb_idle);
            break;
        }
        //${base::qm_kb::SM::init::DEACTIVATE_ACTOR}
        case DEACTIVATE_ACTOR_SIG: {
            status_ = Q_TRAN(&qm_kb_reset);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}

//${base::qm_kb::SM::init::k0_hold} ..........................................
static QState qm_kb_k0_hold(qm_kb * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_kb::SM::init::k0_hold}
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->hold_timer,  BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_kb::SM::init::k0_hold}
        case Q_EXIT_SIG: {
            QTimeEvt_disarm(&me->hold_timer);
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_kb::SM::init::k0_hold::KB_HOLD_TIMEOUT}
        case KB_HOLD_TIMEOUT_SIG: {

            QEvt *pe = Q_NEW(QEvt, KB_K0_HOLD_SIG);
            QF_PUBLISH((QEvt*)pe, NULL);

            //LOG("K0 Holding");
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&qm_kb_init);
            break;
        }
    }
    return status_;
}

//${base::qm_kb::SM::init::k1_hold} ..........................................
static QState qm_kb_k1_hold(qm_kb * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_kb::SM::init::k1_hold}
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->hold_timer,  BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_kb::SM::init::k1_hold}
        case Q_EXIT_SIG: {
            QTimeEvt_disarm(&me->hold_timer);
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_kb::SM::init::k1_hold::KB_HOLD_TIMEOUT}
        case KB_HOLD_TIMEOUT_SIG: {

            QEvt *pe = Q_NEW(QEvt, KB_K1_HOLD_SIG);
            QF_PUBLISH((QEvt*)pe, NULL);
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&qm_kb_init);
            break;
        }
    }
    return status_;
}

//${base::qm_kb::SM::init::idle} .............................................
static QState qm_kb_idle(qm_kb * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_SUPER(&qm_kb_init);
            break;
        }
    }
    return status_;
}

//${base::qm_kb::SM::reset} ..................................................
static QState qm_kb_reset(qm_kb * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_kb::SM::reset}
        case Q_ENTRY_SIG: {
            LOG("qm_kb reset");
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_kb::SM::reset::ACTIVATE_ACTOR}
        case ACTIVATE_ACTOR_SIG: {
            status_ = Q_TRAN(&qm_kb_init);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
//$enddef${base::qm_kb} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

