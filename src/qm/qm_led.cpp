//$file${../::src::qm::qm_led.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: led.qm
// File:  ${../::src::qm::qm_led.cpp}
//
// This code has been generated by QM 6.1.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${../::src::qm::qm_led.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qm/qm_led.h"
#include "qm/qm_common.h"

//$declare${base::qm_led} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${base::qm_led} ............................................................
typedef struct {
// protected:
    QActive super;

// public:
    QTimeEvt timer;
} qm_led;

// protected:
static QState qm_led_initial(qm_led * const me, void const * const par);
static QState qm_led_init(qm_led * const me, QEvt const * const e);
static QState qm_led_slow_blink(qm_led * const me, QEvt const * const e);
static QState qm_led_s_on(qm_led * const me, QEvt const * const e);
static QState qm_led_s_off(qm_led * const me, QEvt const * const e);
static QState qm_led_reset(qm_led * const me, QEvt const * const e);
//$enddecl${base::qm_led} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


static qm_led l_qm_led;

QActive* const ao_qm_led = (QActive*)&l_qm_led;

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpc version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${base::qm_led_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${base::qm_led_ctor} .......................................................
void qm_led_ctor(void) {
    qm_led *me = &l_qm_led;

    QActive_ctor(&me->super, Q_STATE_CAST(&qm_led_initial));

    QTimeEvt_ctorX (&me->timer, &me->super, LED_TIMEOUT_SIG, 0U);

}
//$enddef${base::qm_led_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${base::qm_led} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${base::qm_led} ............................................................

//${base::qm_led::SM} ........................................................
static QState qm_led_initial(qm_led * const me, void const * const par) {
    //${base::qm_led::SM::initial}
    QActive_subscribe((QActive *)me, ACTIVATE_ACTOR_SIG);
    QActive_subscribe((QActive *)me, DEACTIVATE_ACTOR_SIG);


    QActive_subscribe((QActive *)me, LED_INIT_SIG);
    return Q_TRAN(&qm_led_reset);
}

//${base::qm_led::SM::init} ..................................................
static QState qm_led_init(qm_led * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_led::SM::init}
        case Q_ENTRY_SIG: {
            LOG("led init");

            led_init();


            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_led::SM::init::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&qm_led_slow_blink);
            break;
        }
        //${base::qm_led::SM::init::DEACTIVATE_ACTOR}
        case DEACTIVATE_ACTOR_SIG: {
            status_ = Q_TRAN(&qm_led_reset);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}

//${base::qm_led::SM::init::slow_blink} ......................................
static QState qm_led_slow_blink(qm_led * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_led::SM::init::slow_blink}
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->timer,  BSP_TICKS_PER_SEC, BSP_TICKS_PER_SEC);
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_led::SM::init::slow_blink}
        case Q_EXIT_SIG: {
            QTimeEvt_disarm(&me->timer);
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_led::SM::init::slow_blink::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&qm_led_s_on);
            break;
        }
        default: {
            status_ = Q_SUPER(&qm_led_init);
            break;
        }
    }
    return status_;
}

//${base::qm_led::SM::init::slow_blink::s_on} ................................
static QState qm_led_s_on(qm_led * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_led::SM::init::slow_blink::s_on}
        case Q_ENTRY_SIG: {

            LOG("led on");

            led_switch(true);

            //adc_get_value();

            //adc_convert();
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_led::SM::init::slow_blink::s_on::LED_TIMEOUT}
        case LED_TIMEOUT_SIG: {
            status_ = Q_TRAN(&qm_led_s_off);
            break;
        }
        default: {
            status_ = Q_SUPER(&qm_led_slow_blink);
            break;
        }
    }
    return status_;
}

//${base::qm_led::SM::init::slow_blink::s_off} ...............................
static QState qm_led_s_off(qm_led * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_led::SM::init::slow_blink::s_off}
        case Q_ENTRY_SIG: {

            //LOG("led off");

            led_switch(false);
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_led::SM::init::slow_blink::s_off::LED_TIMEOUT}
        case LED_TIMEOUT_SIG: {
            status_ = Q_TRAN(&qm_led_s_on);
            break;
        }
        default: {
            status_ = Q_SUPER(&qm_led_slow_blink);
            break;
        }
    }
    return status_;
}

//${base::qm_led::SM::reset} .................................................
static QState qm_led_reset(qm_led * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_led::SM::reset}
        case Q_ENTRY_SIG: {
            LOG("qm_led reset");
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_led::SM::reset::ACTIVATE_ACTOR}
        case ACTIVATE_ACTOR_SIG: {
            status_ = Q_TRAN(&qm_led_init);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
//$enddef${base::qm_led} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

