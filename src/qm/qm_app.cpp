//$file${../::src::qm::qm_app.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: app.qm
// File:  ${../::src::qm::qm_app.cpp}
//
// This code has been generated by QM 6.1.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${../::src::qm::qm_app.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qm/qm_app.h"
#include "qm/qm_common.h"

//$declare${base::qm_app} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${base::qm_app} ............................................................
typedef struct {
// protected:
    QActive super;

// public:
    QTimeEvt timer;
} qm_app;

// protected:
static QState qm_app_initial(qm_app * const me, void const * const par);
static QState qm_app_init(qm_app * const me, QEvt const * const e);
static QState qm_app_product_mode(qm_app * const me, QEvt const * const e);
static QState qm_app_ready(qm_app * const me, QEvt const * const e);
static QState qm_app_reset(qm_app * const me, QEvt const * const e);
//$enddecl${base::qm_app} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


static qm_app l_qm_app;

QActive* const ao_qm_app = (QActive*)&l_qm_app;

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpc version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${base::qm_app_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${base::qm_app_ctor} .......................................................
void qm_app_ctor(void) {
    qm_app *me = &l_qm_app;

    QActive_ctor(&me->super, Q_STATE_CAST(&qm_app_initial));

    QTimeEvt_ctorX (&me->timer, &me->super, APP_TIMEOUT_SIG, 0U);

}
//$enddef${base::qm_app_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${base::qm_app} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${base::qm_app} ............................................................

//${base::qm_app::SM} ........................................................
static QState qm_app_initial(qm_app * const me, void const * const par) {
    //${base::qm_app::SM::initial}
    QActive_subscribe((QActive *)me, APP_ACTIVATE_SIG);

    QActive_subscribe((QActive *)me, APP_NEXT_SIG);

    QActive_subscribe((QActive *)me, APP_START_SIG);
    QActive_subscribe((QActive *)me, APP_STOP_SIG);


    QActive_subscribe((QActive *)me, KB_K0_PRESS_SIG);
    return Q_TRAN(&qm_app_reset);
}

//${base::qm_app::SM::init} ..................................................
static QState qm_app_init(qm_app * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_app::SM::init}
        case Q_ENTRY_SIG: {
            LOG("qm_app init");

            l_app.init();
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_app::SM::init}
        case Q_EXIT_SIG: {
            l_app.deinit();
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_app::SM::init::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&qm_app_product_mode);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}

//${base::qm_app::SM::init::product_mode} ....................................
static QState qm_app_product_mode(qm_app * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_app::SM::init::product_mode}
        case Q_ENTRY_SIG: {

            //gpio_init();

            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_app::SM::init::product_mode::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&qm_app_ready);
            break;
        }
        default: {
            status_ = Q_SUPER(&qm_app_init);
            break;
        }
    }
    return status_;
}

//${base::qm_app::SM::init::product_mode::ready} .............................
static QState qm_app_ready(qm_app * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_app::SM::init::product_mode::ready}
        case Q_ENTRY_SIG: {
            LOG("qm_app ready");

            {
            QEvt *pe = NULL;
            pe = Q_NEW(QEvt, ACTIVATE_ACTOR_SIG);
            QF_PUBLISH((QEvt*)pe, NULL);
            }
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&qm_app_product_mode);
            break;
        }
    }
    return status_;
}

//${base::qm_app::SM::reset} .................................................
static QState qm_app_reset(qm_app * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_app::SM::reset}
        case Q_ENTRY_SIG: {
            LOG("qm_app reset");
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_app::SM::reset::APP_ACTIVATE}
        case APP_ACTIVATE_SIG: {
            status_ = Q_TRAN(&qm_app_init);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
//$enddef${base::qm_app} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

