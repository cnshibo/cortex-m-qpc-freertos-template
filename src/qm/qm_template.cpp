//$file${../::src::qm::qm_template.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: actor-template.qm
// File:  ${../::src::qm::qm_template.cpp}
//
// This code has been generated by QM 6.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// Copyright (c) 2005 Quantum Leaps, LLC
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for licensees
// interested in retaining the proprietary status of the generated code.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${../::src::qm::qm_template.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qm/qm_template.h"
#include "qm/qm_common.h"

//$declare${base::qm_template} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${base::qm_template} .......................................................
typedef struct {
// protected:
    QActive super;

// public:
    QTimeEvt timer;
} qm_template;

// protected:
static QState qm_template_initial(qm_template * const me, void const * const par);
static QState qm_template_active(qm_template * const me, QEvt const * const e);
static QState qm_template_idle(qm_template * const me, QEvt const * const e);
static QState qm_template_working(qm_template * const me, QEvt const * const e);
static QState qm_template_reset(qm_template * const me, QEvt const * const e);
//$enddecl${base::qm_template} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


static qm_template l_qm_template;

QActive* const ao_qm_template = (QActive*)&l_qm_template;

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U)%0x2710U))
#error qpc version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${base::qm_template_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${base::qm_template_ctor} ..................................................
void qm_template_ctor(void) {
    qm_template *me = &l_qm_template;

    QActive_ctor(&me->super, Q_STATE_CAST(&qm_template_initial));

    QTimeEvt_ctorX (&me->timer, &me->super, TEMPLATE_TIMEOUT_SIG, 0U);

}
//$enddef${base::qm_template_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${base::qm_template} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${base::qm_template} .......................................................

//${base::qm_template::SM} ...................................................
static QState qm_template_initial(qm_template * const me, void const * const par) {
    //${base::qm_template::SM::initial}
    QActive_subscribe((QActive *)me, ACTIVATE_ACTOR_SIG);
    QActive_subscribe((QActive *)me, DEACTIVATE_ACTOR_SIG);



    QActive_subscribe((QActive *)me, TEMPLATE_INIT_SIG);
    QActive_subscribe((QActive *)me, TEMPLATE_DEINIT_SIG);

    return Q_TRAN(&qm_template_reset);
}

//${base::qm_template::SM::active} ...........................................
static QState qm_template_active(qm_template * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_template::SM::active}
        case Q_ENTRY_SIG: {
            LOG("qm_template init");


            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_template::SM::active::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&qm_template_idle);
            break;
        }
        //${base::qm_template::SM::active::DEACTIVATE_ACTOR}
        case DEACTIVATE_ACTOR_SIG: {
            status_ = Q_TRAN(&qm_template_reset);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}

//${base::qm_template::SM::active::idle} .....................................
static QState qm_template_idle(qm_template * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_template::SM::active::idle}
        case Q_ENTRY_SIG: {
            LOG("qm_template idle");
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_template::SM::active::idle::TEMPLATE_INIT}
        case TEMPLATE_INIT_SIG: {
            status_ = Q_TRAN(&qm_template_working);
            break;
        }
        default: {
            status_ = Q_SUPER(&qm_template_active);
            break;
        }
    }
    return status_;
}

//${base::qm_template::SM::active::working} ..................................
static QState qm_template_working(qm_template * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_template::SM::active::working}
        case Q_ENTRY_SIG: {
            LOG("qm_template working");

            QTimeEvt_armX(&me->timer,  BSP_TICKS_PER_SEC/30, 0);
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_template::SM::active::working}
        case Q_EXIT_SIG: {

            QTimeEvt_disarm(&me->timer);
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_template::SM::active::working::TEMPLATE_DEINIT}
        case TEMPLATE_DEINIT_SIG: {
            status_ = Q_TRAN(&qm_template_idle);
            break;
        }
        default: {
            status_ = Q_SUPER(&qm_template_active);
            break;
        }
    }
    return status_;
}

//${base::qm_template::SM::reset} ............................................
static QState qm_template_reset(qm_template * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        //${base::qm_template::SM::reset}
        case Q_ENTRY_SIG: {
            LOG("qm_template reset");
            status_ = Q_HANDLED();
            break;
        }
        //${base::qm_template::SM::reset::ACTIVATE_ACTOR}
        case ACTIVATE_ACTOR_SIG: {
            status_ = Q_TRAN(&qm_template_active);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
//$enddef${base::qm_template} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

