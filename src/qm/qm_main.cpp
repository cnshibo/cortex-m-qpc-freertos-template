//$file${../::src::qm::qm_main.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: main.qm
// File:  ${../::src::qm::qm_main.cpp}
//
// This code has been generated by QM 6.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// Copyright (c) 2005 Quantum Leaps, LLC
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for licensees
// interested in retaining the proprietary status of the generated code.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${../::src::qm::qm_main.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include <stdint.h>
#include <string.h>

#include "bl/bl.h"
#include "qm/qm.h"
#include "qpc.h"

/* Local-scope objects -----------------------------------------------------*/
Q_DEFINE_THIS_FILE

static QEvt const *l_qm_boot_QSto[10];
static QEvt const *l_qm_rtt_QSto[10];
static QEvt const *l_qm_led_QSto[10];
static QEvt const *l_qm_kb_QSto[10];
static QEvt const *l_qm_app_QSto[100];

static StackType_t l_qm_boot_stack[configMINIMAL_STACK_SIZE];
static StackType_t l_qm_rtt_stack[configMINIMAL_STACK_SIZE];
static StackType_t l_qm_led_stack[configMINIMAL_STACK_SIZE];
static StackType_t l_qm_kb_stack[configMINIMAL_STACK_SIZE];
static StackType_t l_qm_app_stack[configMINIMAL_STACK_SIZE];

static QF_MPOOL_EL(QEvt)          l_small_pool[100];
static QF_MPOOL_EL(key_evt_t)     l_middle_pool[100];


static QSubscrList    l_subscrSto[MAX_SIG];
/*..........................................................................*/

/*..........................................................................*/
extern "C" int qpc_main()
{
    LOG("\n*** Power on, in main() ***\n");

    /*************************************************************************/
    /* state-machine framework */
    QF_init();

    qm_boot_ctor();

    qm_app_ctor();
    qm_rtt_ctor();
    qm_led_ctor();
    qm_kb_ctor();

    /* initialize the event pools... */
    QF_poolInit(l_small_pool,   sizeof(l_small_pool),   sizeof(l_small_pool[0]));
    QF_poolInit(l_middle_pool,  sizeof(l_middle_pool),  sizeof(l_middle_pool[0]));


    /* init publish-subscribe */
    QF_psInit(l_subscrSto, Q_DIM(l_subscrSto));


    QACTIVE_START(ao_qm_rtt,
                  3U,
                  l_qm_rtt_QSto, Q_DIM(l_qm_rtt_QSto),
                  l_qm_rtt_stack, sizeof(l_qm_rtt_stack),
                  (QEvt *)0);


    QACTIVE_START(ao_qm_led,
                  4U,
                  l_qm_led_QSto, Q_DIM(l_qm_led_QSto),
                  l_qm_led_stack, sizeof(l_qm_led_stack),
                  (QEvt *)0);

    QACTIVE_START(ao_qm_kb,
                  5U,
                  l_qm_kb_QSto, Q_DIM(l_qm_kb_QSto),
                  l_qm_kb_stack, sizeof(l_qm_kb_stack),
                  (QEvt *)0);

    QACTIVE_START(ao_qm_app,
                  14U,
                  l_qm_app_QSto, Q_DIM(l_qm_app_QSto),
                  l_qm_app_stack, sizeof(l_qm_app_stack),
                  (QEvt *)0);

    QACTIVE_START(ao_qm_boot,
                  15U,
                  l_qm_boot_QSto, Q_DIM(l_qm_boot_QSto),
                  l_qm_boot_stack, sizeof(l_qm_boot_stack),
                  (QEvt *)0);

    LOG("\n*** Actors did reset ***\n");


    QF_run();                              /* run the QF application */

    return 0;
}




